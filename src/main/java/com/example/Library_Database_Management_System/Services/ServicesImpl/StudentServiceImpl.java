package com.example.Library_Database_Management_System.Services.ServicesImpl;

import com.example.Library_Database_Management_System.DTOs.StudentUpdateMobRequestDto;
import com.example.Library_Database_Management_System.Enums.CardStatus;
import com.example.Library_Database_Management_System.Models.Card;
import com.example.Library_Database_Management_System.Models.Student;
import com.example.Library_Database_Management_System.Repositories.StudentRepository;
import com.example.Library_Database_Management_System.Services.StudentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class StudentServiceImpl implements StudentService {
    @Autowired
    StudentRepository studentRespository;

    public String createStudent(Student student){
        //Student from the postman is already the basic attributes set

        //Card should also be autogenerated when createStudent function is called
        Card card = new Card();
        card.setCardStatus(CardStatus.ACTIVATED); //Card status is being set.
        card.setStudentVariableName(student); //Foreign Key attribute

        //Lets go to the student
        student.setCard(card);

        //If there was a unidirectional mapping : we had to save both of them

        //But we are super advance and are suing bidrectional : Child will automatically be saved

        studentRespository.save(student);
        //Here we are calling .save for student repository but child will be automatically be saved by
        //cascading effect

        return "Student and Card added";
    }

    /*3 ways to write JPA Queries

        1) Inbuilt + Don't even need to define them before using (like .save and .findBy)
        2) Inbuilt + Define the Query (like findBy(Attribute Name)) // basically we are providing attribute type
        and Query JPA will write on its own, and it will also execute it
        3) Not defined - Write the SQL Query and JPA will execute it

    */

    public String findNameByEmail(String email){
        Student student = studentRespository.findByEmail(email);
        return student.getName();
    }

    public String updateMobNo(StudentUpdateMobRequestDto StudentReq){
        //First we will try to fetch original/old data
        Student originalStudent = studentRespository.findById(StudentReq.getId()).get();

        //We will keep the other properties as it is : and only change the required parameters

        originalStudent.setMobNo(StudentReq.getMobNo());

        studentRespository.save(originalStudent);

        return "Student has been updated successfully";
    }

}
